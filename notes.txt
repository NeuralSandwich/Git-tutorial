git init
        (git init <dir>)
        (git initi --bare)

git clone <repo>
        (git clone <repo> <directory>) 
        (git clone ssh://john"example.com/path/to/my-poject.git)

git config
        (git config user.name <name>)
        (git config --global user.name <name>)
        (git config --global user.email <email>)
        (git config --global alias.<alias-name> <git-command>)
        (git config --system core.editor <editor>)
        (git config --global --edit)
        (git config --global alias.st status)
        (git config --global alias.co checkout)
        (git config --global alias.br branch)
        (git config --global alias.up rebase)
        (git config --global alias.ci commit)

The git add command adds a change in the working directory to the staging area.
It tells Git that you want to include updates to a particular file in the next
commit. However, git add doesn't really affect the repository in any
significant way—changes are not actually recorded until you run git commit.

git add
        (git add <file>)
        (git add <directory>)
        (git add -p)
        Begin an interactive staging session that lets you choose portions of a
        file to add to the next commit. This will present you with a chunk of
        changes and prompt you for a command. Use y to stage the chunk, n to
        ignore the chunk, s to split it into smaller chunks, e to manually edit
        the chunk, and q to exit.

The Staging Area

The staging area is one of Git's more unique features, and it can take some
time to wrap your head around it if you’re coming from an SVN (or even a
Mercurial) background. It helps to think of it as a buffer between the working
directory and the project history.

Instead of committing all of the changes you've made since the last commit, the
stage lets you group related changes into highly focused snapshots before
actually committing it to the project history. This means you can make all
sorts of edits to unrelated files, then go back and split them up into logical
commits by adding related changes to the stage and commit them piece-by-piece.
As in any revision control system, it’s important to create atomic commits so
that it’s easy to track down bugs and revert changes with minimal impact on the
rest of the project.


git add .
git commit


git commit
        (git commit -m "<message>")
        (git commit -a)


Snapshots are always committed to the local repository. This is fundamentally
different from SVN, wherein the working copy is committed to the central
repository. In contrast, Git doesn’t force you to interact with the central
repository until you’re ready. Just as the staging area is a buffer between the
working directory and the project history, each developer’s local repository is
a buffer between their contributions and the central repository.

This changes the basic development model for Git users. Instead of making a
change and committing it directly to the central repo, Git developers have the
opportunity to accumulate commits in their local repo. This has many advantages
over SVN-style collaboration: it makes it easier to split up a feature into
atomic commits, keep related commits grouped together, and clean up local
history before publishing it to the central repository. It also lets developers
work in an isolated environment, deferring integration until they’re at a
convenient break point.

Snapshots, Not Differences

Aside from the practical distinctions between SVN and Git, their underlying
implementation also follow entirely divergent design philosophies. Whereas SVN
tracks differences of a file, Git’s version control model is based on
snapshots. For example, an SVN commit consists of a diff compared to the
original file added to the repository. Git, on the other hand, records the
entire contents of each file in every commit.

Git Tutorial: Snapshots, Not Differences
This makes many Git operations much faster than SVN, since a particular version
of a file doesn’t have to be “assembled” from its diffs—the complete revision
of each file is immediately available from Git's internal database.

Git's snapshot model has a far-reaching impact on virtually every aspect of its
version control model, affecting everything from its branching and merging
tools to its collaboration workflows.


git status

The git status command displays the state of the working directory and the
staging area. It lets you see which changes have been staged, which haven’t,
and which files aren’t being tracked by Git. Status output does not show you
any information regarding the committed project history. For this, you need to
use git log.


git log

        (git log -n <limit>
        (git log --oneline
        (git log --stat
        (git log -p
        (git log --author"<pattern>"
        (git log --grep="<pattern>")
        (git log <since>..<until>)
        (git log <file>)
        (git log --grpah --decorate --oneline)

This ID can be used in commands like git log <since>..<until> to refer to
specific commits. For instance, git log 3157e..5ab91 will display everything
between the commits with ID's 3157e and 5ab91. Aside from checksums, branch
names (discussed in the Branch Module) and the HEAD keyword are other common
methods for referring to individual commits. HEAD always refers to the current
commit, be it a branch or a specific commit.

The ~ character is useful for making relative references to the parent of a
commit. For example, 3157e~1 refers to the commit before 3157e, and HEAD~3 is
the great-grandparent of the current commit.

The idea behind all of these identification methods is to let you perform
actions based on specific commits. The git log command is typically the
starting point for these interactions, as it lets you find the commits you want
to work with.

        (git log --author="John Smith" -p hello.py)
        (git log --oneline master..some-feature)


git checkout

        (git checkout <branch>)
        (git checkout <commit> <file>)
        (git checkout <commit>)

The whole idea behind any version control system is to store “safe” copies of a
project so that you never have to worry about irreparably breaking your code
base. Once you’ve built up a project history, git checkout is an easy way to
“load” any of these saved snapshots onto your development machine.

Checking out an old commit is a read-only operation. It’s impossible to harm
your repository while viewing an old revision. The “current” state of your
project remains untouched in the master branch (see the Branches Module for
details). During the normal course of development, the HEAD usually points to
master or some other local branch, but when you check out a previous commit,
HEAD no longer points to a branch—it points directly to a commit. This is
called a “detached HEAD” state, and it can be visualized as the following:


git revert

        (git revert <commit>)

It's important to understand that git revert undoes a single commit—it does not
"revert" back to the previous state of a project by removing all subsequent
commits. In Git, this is actually called a reset, not a revert.

Reverting has two important advantages over resetting. First, it doesn’t change
the project history, which makes it a “safe” operation for commits that have
already been published to a shared repository. For details about why altering
shared history is dangerous, please see the git reset page.

Second, git revert is able to target an individual commit at an arbitrary point
in the history, whereas git reset can only work backwards from the current
commit. For example, if you wanted to undo an old commit with git reset, you
would have to remove all of the commits that occurred after the target commit,
remove it, then re-commit all of the subsequent commits. Needless to say, this
is not an elegant undo solution.


git reset

    (git reset <file>)
    (git reset --hard <commit>)
    
All of the above invocations are used to remove changes from a repository.
Without the --hard flag, git reset is a way to clean up a repository by
unstaging changes or uncommitting a series of snapshots and re-building them
from scratch. The --hard flag comes in handy when an experiment has gone
horribly wrong and you need a clean slate to work with.

Whereas reverting is designed to safely undo a public commit, git reset is
designed to undo local changes. Because of their distinct goals, the two
commands are implemented differently: resetting completely removes a changeset,
whereas reverting maintains the original changeset and uses a new commit to
apply the undo.

You should never use git reset <commit> when any snapshots after <commit> have
been pushed to a public repository. After publishing a commit, you have to
assume that other developers are reliant upon it.

Removing a commit that other team members have continued developing poses
serious problems for collaboration. When they try to sync up with your
repository, it will look like a chunk of the project history abruptly
disappeared. The sequence below demonstrates what happens when you try to reset
a public commit. The origin/master branch is the central repository’s version
of your local master branch.


git clean

        (git clean -n) -- Dry run
        (git clean -f) -- force clean
        (git clean -f <path>) -- restrict to certain path

1.1 git init - Initialized empty Git repository in <dir>
1.2 git status - # On branch master
                 # 
                 # Initial commit
                 #
                 nothing to commit (create/copy files use "git add" to track)

1.3 touch foo.txt
1.3 git status   # On branch master
                 #
                 # Initial commit
                 #
                 # Untracked files:
                 #   (use "git add <file>..." to include in what will be committed)
                 #
                 #      foo.txt
                 nothing added to commit but untracked files present (use "git add" to track)

1.4 git add foo.txt
1.5 git status   # On branch master
                 #
                 # Initial commit
                 #
                 # Changes to be committed:
                 #   (use "git rm --cached <file>..." to unstage)
                 #
                 #      new file: foo.txt

1.6 git commit -m "Added foo.txt"
                 [master (root-commit) 6b51d65] added foo.txt
                 1 file changed, 1 insertion(+)
                  create mode 100644 foo.txt

1.7 touch bar.txt dir1/foorbar.txt
1.7 git add '*.txt'
1.7 git status   # On branch master
                 # Changes to be committed:
                 #   (use "git reset HEAD <file>..." to unstage)
                 #
                 # new file: bar.txt
                 # new file: dir1/foorbar.txt

1.8 git commit -m "Added all the new text files"
                 [master ac0572] Add all the new text files
                 2 files changed, 0 insertions(+), 0 deletions(-)
                  create mode 100644 bar.txt
                  create mode 100644 dir1/foobar.txt
1.9 git log
                 commit 1870c043e8e6a2031acf55e3da2059a95e9bc97c
                 Author: Sean Jones <neuralsandwich@gmail.com>
                 Date:   Thu May 8 07:55:14 2014 +0100

                     Added new text files

                 commit 6b51d65ff7ab940f5fda771bfdd2e6df05cb2149
                 Author: Sean Jones <neuralsandwich@gmail.com>
                 Date:   Wed May 7 23:54:06 2014 +0100

                     added foo.txt

1.10 git remote add origin https:/github.com/neuralsandwich/try_git.git
1.11 git push -u origin master

git add octofamily/octodog.txt
git diff --staged
git reset dir1/foobar.txt

git checkout -- foo.txt

git branch clean-up

git checkout clean_up

git rm '*.txt'

git commit -m "Remove all the cats"

git checkout master

git merge clean_up

git branch -d clean_up

git push


